require('dotenv').config();

const TelegramBot = require("node-telegram-bot-api");
const { dishes } = require("./data"); 




const token = process.env.TELEGRAM_BOT_TOKEN;

const bot = new TelegramBot(token, { polling: true });



const userFavorites = {}; 




const mainKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: "üçΩÔ∏è –ö–∞—Ç–∞–ª–æ–≥" }],
      [{ text: "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º" }],
      [{ text: "‚≠êÔ∏è –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞" }],
      [{ text: "üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ –±–ª—é–¥–æ" }],
      [{ text: "‚ùì –ü–æ–º–æ—â—å" }],
    ],
    resize_keyboard: true, 
  },
};


const catalogKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: "üåÖ –ó–∞–≤—Ç—Ä–∞–∫–∏" }],
      [{ text: "üçú –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞" }],
      [{ text: "ü•£ –°—É–ø—ã" }],
      [{ text: "üç∞ –î–µ—Å–µ—Ä—Ç—ã" }],
      [{ text: "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" }],
    ],
    resize_keyboard: true,
  },
};




function formatDishInfo(dish) {
  return `
*${dish.name}*
_–°–ª–æ–∂–Ω–æ—Å—Ç—å:_ ${dish.difficulty}
_–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏:_ ${dish.time}
_–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:_ ${dish.ingredients.join(", ")}
_–ö–∞–ª–æ—Ä–∏–∏:_ ${dish.calories} –∫–∫–∞–ª
_–¢–µ–≥–∏:_ ${dish.tags.map((tag) => `#${tag}`).join(", ")}
    `;
}


function sendDishesByTag(chatId, tag) {
  const filteredDishes = dishes.filter((dish) => dish.tags.includes(tag));
  if (filteredDishes.length === 0) {
    bot.sendMessage(
      chatId,
      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª—é–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${tag}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`
    );
    return;
  }
  bot.sendMessage(chatId, `–ë–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${tag}":`);
  filteredDishes.forEach((dish) => {
    const options = {
      parse_mode: "Markdown", 
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
              callback_data: `add_favorite_${dish.id}`,
            },
          ],
        ],
      },
    };
    bot.sendMessage(chatId, formatDishInfo(dish), options);
  });
}




bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
    mainKeyboard
  );
});


bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;


  if (msg.from.is_bot) return;


  if (text === "üçΩÔ∏è –ö–∞—Ç–∞–ª–æ–≥") {
    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥:", catalogKeyboard);
  } else if (text === "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º") {
    bot.sendMessage(
      chatId,
      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π, –∏ —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–ª—é–¥–∞ (–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å +-10%). –ù–∞–ø—Ä–∏–º–µ—Ä: `500`"
    );

    bot.states = bot.states || {};
    bot.states[chatId] = "awaiting_calories";
  } else if (text === "‚≠êÔ∏è –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞") {
    const favoriteDishIds = userFavorites[chatId] || [];
    if (favoriteDishIds.length === 0) {
      bot.sendMessage(
        chatId,
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥. –î–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!"
      );
      return;
    }

    bot.sendMessage(chatId, "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:");
    favoriteDishIds.forEach((dishId) => {
      const dish = dishes.find((d) => d.id === dishId);
      if (dish) {
        const options = {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                  callback_data: `remove_favorite_${dish.id}`,
                },
              ],
            ],
          },
        };
        bot.sendMessage(chatId, formatDishInfo(dish), options);
      }
    });
  } else if (text === "üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ –±–ª—é–¥–æ") {
    const randomIndex = Math.floor(Math.random() * dishes.length);
    const randomDish = dishes[randomIndex];
    const options = {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
              callback_data: `add_favorite_${randomDish.id}`,
            },
          ],
        ],
      },
    };
    bot.sendMessage(
      chatId,
      `–í–æ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ:\n${formatDishInfo(randomDish)}`,
      options
    );
  } else if (text === "‚ùì –ü–æ–º–æ—â—å") {
    bot.sendMessage(
      chatId,
      `
–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤!
–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –±–ª—é–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
- –ò—Å–∫–∞—Ç—å –±–ª—é–¥–∞ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º.
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
- –ü–æ–ª—É—á–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è.

–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏: boyarintsevvv@gmail.com
        `
    );
  }

  else if (text === "üåÖ –ó–∞–≤—Ç—Ä–∞–∫–∏") {
    sendDishesByTag(chatId, "–∑–∞–≤—Ç—Ä–∞–∫");
  } else if (text === "üçú –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞") {
    sendDishesByTag(chatId, "–æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ");
  } else if (text === "ü•£ –°—É–ø—ã") {
    sendDishesByTag(chatId, "—Å—É–ø—ã");
  } else if (text === "üç∞ –î–µ—Å–µ—Ä—Ç—ã") {
    sendDishesByTag(chatId, "–¥–µ—Å–µ—Ä—Ç—ã");
  } else if (text === "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
    bot.sendMessage(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", mainKeyboard);
  }

  else if (bot.states && bot.states[chatId] === "awaiting_calories") {
    const calories = parseInt(text); 
    if (isNaN(calories)) {
      bot.sendMessage(
        chatId,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **—á–∏—Å–ª–æ–≤–æ–µ** –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–ª–æ—Ä–∏–π."
      );
    } else {
      const minCalories = calories * 0.9; 
      const maxCalories = calories * 1.1; 

      const filteredDishes = dishes.filter(
        (dish) => dish.calories >= minCalories && dish.calories <= maxCalories
      );

      if (filteredDishes.length === 0) {
        bot.sendMessage(
          chatId,
          `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª—é–¥ —Å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${Math.round(
            minCalories
          )}-${Math.round(maxCalories)} –∫–∫–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`
        );
      } else {
        bot.sendMessage(
          chatId,
          `–ë–ª—é–¥–∞ —Å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é –ø—Ä–∏–º–µ—Ä–Ω–æ ${calories} –∫–∫–∞–ª (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${Math.round(
            minCalories
          )}-${Math.round(maxCalories)} –∫–∫–∞–ª):`
        );
        filteredDishes.forEach((dish) => {
          const options = {
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    callback_data: `add_favorite_${dish.id}`,
                  },
                ],
              ],
            },
          };
          bot.sendMessage(chatId, formatDishInfo(dish), options);
        });
      }
    }
    delete bot.states[chatId]; 
  }
});


bot.on("callback_query", (callbackQuery) => {
  const message = callbackQuery.message; 
  const chatId = message.chat.id;
  const data = callbackQuery.data; 

  if (data.startsWith("add_favorite_")) {
    const dishId = data.replace("add_favorite_", ""); 
    if (!userFavorites[chatId]) {
      userFavorites[chatId] = []; 
    }
    if (!userFavorites[chatId].includes(dishId)) {

      userFavorites[chatId].push(dishId);
      bot.answerCallbackQuery(callbackQuery.id, "–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"); 
    } else {
      bot.answerCallbackQuery(callbackQuery.id, "–≠—Ç–æ –±–ª—é–¥–æ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!");
    }
  }

  else if (data.startsWith("remove_favorite_")) {
    const dishId = data.replace("remove_favorite_", "");
    if (userFavorites[chatId]) {
      userFavorites[chatId] = userFavorites[chatId].filter(
        (id) => id !== dishId
      ); 
      bot.answerCallbackQuery(callbackQuery.id, "–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!");

      bot
        .deleteMessage(chatId, message.message_id)
        .catch((err) => console.error("Error deleting message:", err.message));
    } else {
      bot.answerCallbackQuery(callbackQuery.id, "–≠—Ç–æ–≥–æ –±–ª—é–¥–∞ –Ω–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.");
    }
  }
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
